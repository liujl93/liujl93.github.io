<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jialuo Liu on Jialuo Liu</title>
    <link>https://liujl93.github.io/</link>
    <description>Recent content in Jialuo Liu on Jialuo Liu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0600</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Calling C/C&#43;&#43; from R and multithreading with OpenMP</title>
      <link>https://liujl93.github.io/post/rcpp/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/rcpp/</guid>
      <description>

&lt;p&gt;This post is related to a short course &lt;a href=&#34;http://blue.for.msu.edu/envr18/&#34; target=&#34;_blank&#34;&gt;High Performance Computing for Spatial Data&lt;/a&gt; taught by &lt;a href=&#34;http://blue.for.msu.edu/&#34; target=&#34;_blank&#34;&gt;Dr. Andrew Finley&lt;/a&gt; and Dr. Dorit Hammerling at &lt;a href=&#34;https://community.amstat.org/envr/events/envr2018workshop&#34; target=&#34;_blank&#34;&gt;2018 ENVR Workshop&lt;/a&gt;. An useful slide can be found &lt;a href=&#34;http://blue.for.msu.edu/envr18/slides/R-api.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three functions for integrating R and C/C++:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.Call()&lt;/li&gt;
&lt;li&gt;External()&lt;/li&gt;
&lt;li&gt;.C()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;call&#34;&gt;.Call()&lt;/h2&gt;

&lt;p&gt;In this short course, a detailed explanation of the function .Call() is given. In brief, you will need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A C/C++ function (filename.cpp) and an R wrapper function (filename.R)&lt;/li&gt;
&lt;li&gt;Compile the C/C++ code (in R):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;            system(&amp;quot;R CMD SHLIB filename.cpp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Load the compiled object (filename.so in MacOS or Linux or filename.dll in Windows) in R:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;            dyn.load(&amp;quot;filename.so&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;c&#34;&gt;.C()&lt;/h2&gt;

&lt;p&gt;A good implementation of the function .C() can be found in the R package &lt;a href=&#34;https://www.stat.colostate.edu/~wanghn/Rpackages/bdmiso_0.9.tar.gz&#34; target=&#34;_blank&#34;&gt;bdmiso&lt;/a&gt;, which is developed by Dr. Ela Sienkiewicz from CSU.&lt;/p&gt;

&lt;h2 id=&#34;rcpp&#34;&gt;Rcpp()&lt;/h2&gt;

&lt;p&gt;An alternative is the &lt;a href=&#34;http://www.rcpp.org/&#34; target=&#34;_blank&#34;&gt;Rcpp&lt;/a&gt; package in R. The Rcpp package offers a seamless integration of R and C++. For detailed implementation, you can refer to my &lt;a href=&#34;https://github.com/liujl93/STplm&#34; target=&#34;_blank&#34;&gt;STplm&lt;/a&gt; R package.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install PySpark on MacOS</title>
      <link>https://liujl93.github.io/post/pyspark/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/pyspark/</guid>
      <description>

&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;Jupyter&lt;/code&gt; notebook&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
pip install jupyter

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;PySpark&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisite: Java 8 or higher&lt;/li&gt;
&lt;li&gt;From Apache Spark &lt;a href=&#34;https://spark.apache.org/downloads.html&#34; target=&#34;_blank&#34;&gt;downloads page&lt;/a&gt;, choose an appropriate repository.&lt;/li&gt;
&lt;li&gt;unzip the downloaded file and move it to the directory: /opt/ (you might need sudo mv)&lt;/li&gt;
&lt;li&gt;create a symbolic link: ln -s (you might need sudo ln)&lt;/li&gt;
&lt;li&gt;in your bash(~/.bashrc or ~/.zshrc), configure the environment variables SPARK_HOME, PATH and PYSPARK_DRIVER_PYTHON.&lt;/li&gt;
&lt;li&gt;source bash(~/.bashrc or ~/.zshrc) or restart terminal.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;pyspark&lt;/code&gt; from your intended directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ wget http://mirrors.ocf.berkeley.edu/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz
$ tar xzf spark-2.4.0-bin-hadoop2.7.tgz
$ mv spark-2.4.0-bin-hadoop2.7 /opt/spark-2.4.0
$ ln -s /opt/spark-2.4.0 /opt/sparkÌ€

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ vim ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press i and copy the following code to your bash file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
export SPARK_HOME=/opt/spark
export PATH=$SPARK_HOME/bin:$PATH
export PYSPARK_DRIVER_PYTHON=jupyter
export PYSPARK_DRIVER_PYTHON_OPTS=&#39;notebook&#39;
#For python 3, You have to add the line below or you will get an error
# export PYSPARK_PYTHON=python3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
source ~/.zshrc
pystark

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-your-installation&#34;&gt;Test your installation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In your jupyter notebook, show SparkContext.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SparkContext

Spark UI

Version
v2.4.0
Master
local[*]
AppName
PySparkShell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try the following example, from Michael Galarnyk&amp;rsquo;s &lt;a href=&#34;https://medium.com/@GalarnykMichael/install-spark-on-mac-pyspark-453f395f240b&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sc = SparkContext.getOrCreate()
import numpy as np
TOTAL = 1000000
dots = sc.parallelize([2.0 * np.random.random(2) - 1.0 for i in range(TOTAL)]).cache()
print(&amp;quot;Number of random points:&amp;quot;, dots.count())
stats = dots.stats()
print(&#39;Mean:&#39;, stats.mean())
print(&#39;stdev:&#39;, stats.stdev())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additional &lt;a href=&#34;http://spark.apache.org/examples.html&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt; are provided on the Spark official site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kaggle Project: House Prices (Advanced Regression Techniques) </title>
      <link>https://liujl93.github.io/post/kagglehp/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/kagglehp/</guid>
      <description>&lt;p&gt;Please refer to this &lt;a href=&#34;http://localhost:1313/files/kaggleHP.html&#34; target=&#34;_blank&#34;&gt;notebook&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Movie Recommendation Engine using Spark</title>
      <link>https://liujl93.github.io/post/movierec/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/movierec/</guid>
      <description>

&lt;p&gt;In this post, I will use Apache Spark and MLlib (Spark machine learning library) to build a movie recommender system.&lt;/p&gt;

&lt;p&gt;Prerequisite: &lt;a href=&#34;https://liujl93.github.io/post/pyspark/&#34; target=&#34;_blank&#34;&gt;Install PySpark on MacOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results are based on Python 3.7 with Spark 2.4.&lt;/p&gt;

&lt;h2 id=&#34;datasets-from-movielens-https-grouplens-org-datasets-movielens-latest&#34;&gt;Datasets: from &lt;a href=&#34;https://grouplens.org/datasets/movielens/latest/&#34; target=&#34;_blank&#34;&gt;Movielens&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Full data set (24 million ratings, 40,000 movies, 250,000 users).&lt;/li&gt;
&lt;li&gt;A smaller data set (100836 ratings, 3683 tag application across 9742 movies, 610 users, &lt;sup&gt;1996&lt;/sup&gt;&amp;frasl;&lt;sub&gt;03&lt;/sub&gt;-&lt;sup&gt;2018&lt;/sup&gt;&amp;frasl;&lt;sub&gt;09&lt;/sub&gt;)&lt;/li&gt;
&lt;li&gt;Each user rated at least 20 movies, unique user-id.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mllib-machine-learning-library-in-spark&#34;&gt;MLlib : Machine Learning Library in Spark&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Consists of common ML algorithms, including classification, regression, clustering, and collaborative filtering.&lt;/li&gt;
&lt;li&gt;two packages in this library:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;spark.mllib&lt;/em&gt;&lt;/strong&gt;: handles data in RDDs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;spark.ml&lt;/em&gt;&lt;/strong&gt;: handles data in DataFrames&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;recommendation-system-strategies&#34;&gt;Recommendation System Strategies&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://liujl93.github.io/img/post/movierec/movierec4.png&#34; alt=&#34;Strategies&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This graph is summarized from the paper &amp;ldquo;&lt;a href=&#34;https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf&#34; target=&#34;_blank&#34;&gt;Matrix factorization techniques for recommender systems&lt;/a&gt;.&amp;rdquo; Refer to it for more insights on collaborative filtering and two illuminating cartoons.&lt;/p&gt;

&lt;p&gt;In this post, we will be using the alternating least squares algorithm, from &lt;code&gt;pyspark.ml.recommendation&lt;/code&gt;. To use it, do&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from pyspark.ml.recommendation import ALS

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-useful-sparksql-commands&#34;&gt;Some useful sparksql commands&lt;/h2&gt;

&lt;p&gt;To query and explore the data, we will use some spark SQL commands. Here are a brief list of some useful sparksql commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://liujl93.github.io/img/post/movierec/movierec2.jpeg&#34; alt=&#34;Sparksql&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;run-the-notebook&#34;&gt;Run the notebook&lt;/h2&gt;

&lt;p&gt;Armed with the knowledge of collaborative filtering, let&amp;rsquo;s get some hands-on &lt;a href=&#34;https://github.com/liujl93/Movie-Recommendation-Engine-using-Spark/blob/master/MovieLens-Recommendation-System-PySpark-ALS.ipynb&#34; target=&#34;_blank&#34;&gt;experience&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Koren, Yehuda, Robert Bell, and Chris Volinsky. &amp;ldquo;Matrix factorization techniques for recommender systems.&amp;rdquo; Computer 8 (2009): 30-37.&lt;/li&gt;
&lt;li&gt;F. Maxwell Harper and Joseph A. Konstan. 2015. The MovieLens Datasets: History and Context. ACM Transactions on Interactive Intelligent Systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;Movie recommender system with Spark machine learning&#34; target=&#34;_blank&#34;&gt;Movie recommender system with Spark machine learning&lt;/a&gt; by IBM.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Parallel Programming in R on High Performance Computing (HPC) systems at CSU</title>
      <link>https://liujl93.github.io/post/summit/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/summit/</guid>
      <description>

&lt;p&gt;Parallel computing in Python and Matlab is similar, a useful post can be found &lt;a href=&#34;https://github.com/ResearchComputing/Parallelization_Workshop&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good problems for such type of high performance computing systems are the so-called &amp;ldquo;Embarassingly parallelizable problems&amp;rdquo;. That is, the problem can be separated to a number of mutually independent tasks.&lt;/p&gt;

&lt;h2 id=&#34;road-map-for-running-your-r-code-on-summit&#34;&gt;Road-map for Running Your R Code on Summit&lt;/h2&gt;

&lt;h3 id=&#34;1-code-preparation&#34;&gt;1. Code Preparation.&lt;/h3&gt;

&lt;p&gt;For convenience, I often prepare three files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bash file: (job.txt)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;summit&#34;&gt;Summit&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

#SBATCH -p shas                   # Send this job to the shas partition
#SBATCH -N 10                      # number of nodes
#SBTACH -J YourJobDescription
##SBATCH --mem=96000
#SBATCH --ntasks-per-node=24
#SBATCH -t 0-24:00                  # wall time (D-HH:MM)
#SBATCH -o spl.%j.out             # STDOUT (%j = JobId)
#SBATCH -e spl.%j.err             # STDERR (%j = JobId)
#SBATCH --mail-type=END,FAIL        # notifications for job done &amp;amp; fail
#SBATCH --mail-user=YourEmailAddress # send-to address

R_PROFILE=/home/&amp;lt;USERNAME&amp;gt;/R/x86_64-pc-linux-gnu-library/3.5/snow/RMPISNOWprofile;
export R_PROFILE
module load R
ml gcc
ml openmpi/2.0.1

date
START=`date +%s`
mpirun Rscript --no-save control.R &amp;lt;par1&amp;gt; &amp;lt;par2&amp;gt; &amp;lt;par3&amp;gt; ${SLURM_JOBID}.R_output
END=`date +%s`
date
ELAPSED=$(( $END - $START ))
echo &amp;quot;Elapsed time (hrs):
$(echo &amp;quot;scale=10; $ELAPSED/3600&amp;quot; | bc)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;cray&#34;&gt;Cray&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
#PBS -N mod
#PBS -j oe
#PBS -l mppwidth=120 # number of cores
#PBS -l walltime=01:00:00
#PBS -q small
cd $PBS_O_WORKDIR
R_PROFILE=$HOME/lustrefs/R/library/snow/RMPISNOWprofile; export R_PROFILE
date
START=`date +%s`
aprun -B R --no-save --no-restore CMD BATCH control.R $PBS_JOBNAME.R_output
END=`date +%s`
date
ELAPSED=$(( $END - $START ))
echo &amp;quot;Elapsed time (hrs):
$(echo &amp;quot;scale=10; $ELAPSED/3600&amp;quot; | bc)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;A control R file: (control.R).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# -------------------------------------------------- #
#        Install and load needed R packages          #
# -------------------------------------------------- #
list.of.packages &amp;lt;- c(&amp;quot;Rmpi&amp;quot;,&amp;quot;doSNOW&amp;quot;,&amp;quot;foreach&amp;quot;,&amp;quot;doRNG&amp;quot;,&amp;quot;iterators&amp;quot;,&amp;quot;data.table&amp;quot;,&amp;quot;parallel&amp;quot;)
new.packages &amp;lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,&amp;quot;Package&amp;quot;])]
if(length(new.packages)) install.packages(new.packages)
invisible(lapply(list.of.packages, require, character.only = TRUE))

# You can pass arguments here
args &amp;lt;- commandArgs(TRUE)
par1 &amp;lt;- as.double(args[1])
par2 &amp;lt;- as.double(args[2])
par3 &amp;lt;- as.double(args[3])

working.directory = &#39;/path/to/working/directory&#39;
worker.script = &#39;main.R&#39;

cl = getMPIcluster()
clusterExport(cl, ls())
setwd(working.directory)
source(worker.script)

clusterEvalQ(cl, setwd(working.directory))
clusterEvalQ(cl, source(worker.script))
registerDoSNOW(cl)
rdata_name = paste0(&amp;quot;Cov&amp;quot;,CovStructure,&amp;quot;Type&amp;quot;,Type,&amp;quot;NS&amp;quot;,ns,&amp;quot;.RData&amp;quot;)
nreps = 400
iter0 = 1:nreps
seedM = rbind(rep(401,nreps),c(iter0),c(iter0))
res = foreach(iter = 1:400, .combine=list,.maxcombine=400,.options.RNG=seedM,
              .multicombine=TRUE, .errorhandling = &#39;remove&#39;) %dorng% {
		res =  run.sim()
    # I used to save my results for each iteration, in case my code won&#39;t finish and lose everything.
                save(res,file=paste0(working.directory,&amp;quot;/results/par1&amp;quot;,par1,&amp;quot;/par2&amp;quot;,par2,&amp;quot;/par3&amp;quot;,par3,&amp;quot;/res&amp;quot;,iter,&amp;quot;.Rdata&amp;quot;))
                return(format(object.size(test),units = &amp;quot;Mb&amp;quot;))
              }
.Last = NULL
save.image(rdata_name)
stopCluster(cl)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;And an R file containing the main function (main.R).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-set-up-your-r-environment&#34;&gt;2. Set Up Your R environment&lt;/h3&gt;

&lt;p&gt;For Summit users, you can follow the instructions &lt;a href=&#34;https://github.com/ResearchComputing/Parallelization_Workshop/blob/master/Day4-Parallel_R/01-R-setup.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
For Cray users, you can follow the &lt;a href=&#34;https://www.stat.colostate.edu/~jah/Computing_Hints/files/CRAY.tutorial.pdf&#34; target=&#34;_blank&#34;&gt;instructions&lt;/a&gt; by Dr. Jennifer A. Hoeting.&lt;/p&gt;

&lt;h3 id=&#34;3-submit-your-job&#34;&gt;3. Submit your Job&lt;/h3&gt;

&lt;p&gt;On Summit, in your terminal, type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbatch job.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Cray, enter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qsub job.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>STplm: Spatio-Temporal Partial Linear Model and Bandwidth Selection.</title>
      <link>https://liujl93.github.io/post/stplm/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/stplm/</guid>
      <description>

&lt;h1 id=&#34;stplm&#34;&gt;STplm&lt;/h1&gt;

&lt;p&gt;Spatio-Temporal Partial Linear Model and Bandwidth Selection.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;This package can be installed directly from R by running the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(devtools)
install_github(&amp;quot;liujl93/STplm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, one can download the .tar.gz file from &lt;a href=&#34;https://github.com/liujl93/STplm/archive/master.zip&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; and then run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;~/STplm_0.1.0.tar.gz&amp;quot;, repos = NULL, type = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>https://liujl93.github.io/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 -0600</pubDate>
      
      <guid>https://liujl93.github.io/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Krylov Subspace Method for Large Spatial Datasets</title>
      <link>https://liujl93.github.io/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 -0600</pubDate>
      
      <guid>https://liujl93.github.io/project/internal-project/</guid>
      <description>&lt;p&gt;Test&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semiparametric Modeling and Bandwidth Selection for Continuous-Time Geostatistical Data</title>
      <link>https://liujl93.github.io/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 -0600</pubDate>
      
      <guid>https://liujl93.github.io/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Krylov Subspace Method for Large Spatial Datasets</title>
      <link>https://liujl93.github.io/talk/krylov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liujl93.github.io/talk/krylov/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Semiparametric Modeling and Bandwidth Selection for Continuous-Time Geostatistical Data</title>
      <link>https://liujl93.github.io/talk/spl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liujl93.github.io/talk/spl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://liujl93.github.io/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liujl93.github.io/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
