<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jialuo Liu</title>
    <link>https://liujl93.github.io/authors/jialuo-liu/</link>
    <description>Recent content on Jialuo Liu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jan 2019 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://liujl93.github.io/authors/jialuo-liu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calling C/C&#43;&#43; from R and multithreading with OpenMP</title>
      <link>https://liujl93.github.io/post/rcpp/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/rcpp/</guid>
      <description>This post is related to a short course High Performance Computing for Spatial Data taught by Dr. Andrew Finley and Dr. Dorit Hammerling at 2018 ENVR Workshop. An useful slide can be found here.
There are three functions for integrating R and C/C++:
 .Call() External() .C()  .Call() In this short course, a detailed explanation of the function .Call() is given. In brief, you will need
 A C/C++ function (filename.</description>
    </item>
    
    <item>
      <title>Install PySpark on MacOS</title>
      <link>https://liujl93.github.io/post/pyspark/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/pyspark/</guid>
      <description>Prerequisite  Install Jupyter notebook  pip install jupyter   Install PySpark  Prerequisite: Java 8 or higher From Apache Spark downloads page, choose an appropriate repository. unzip the downloaded file and move it to the directory: /opt/ (you might need sudo mv) create a symbolic link: ln -s (you might need sudo ln) in your bash(~/.bashrc or ~/.zshrc), configure the environment variables SPARK_HOME, PATH and PYSPARK_DRIVER_PYTHON. source bash(~/.</description>
    </item>
    
    <item>
      <title>Movie Recommendation Engine using Spark</title>
      <link>https://liujl93.github.io/post/movierec/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/movierec/</guid>
      <description>In this post, I will use Apache Spark and MLlib (Spark machine learning library) to build a movie recommender system.
The results are based on Python 3.7 with Spark 2.4.
Datasets: from Movielens  Full data set (24 million ratings, 40,000 movies, 250,000 users). A smaller data set (100836 ratings, 3683 tag application across 9742 movies, 610 users, 1996&amp;frasl;03-2018&amp;frasl;09) Each user rated at least 20 movies, unique user-id.  MLlib : Machine Learning Library in Spark  Consists of common ML algorithms, including classification, regression, clustering, and collaborative filtering.</description>
    </item>
    
    <item>
      <title>Parallel Programming in R on High Performance Computing (HPC) systems at CSU</title>
      <link>https://liujl93.github.io/post/summit/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/summit/</guid>
      <description>Parallel computing in Python and Matlab is similar, a useful post can be found here.
Good problems for such type of high performance computing systems are the so-called &amp;ldquo;Embarassingly parallelizable problems&amp;rdquo;. That is, the problem can be separated to a number of mutually independent tasks.
Road-map for Running Your R Code on Summit 1. Code Preparation. For convenience, I often prepare three files:
 A bash file: (job.txt)  Summit #!</description>
    </item>
    
    <item>
      <title>STplm: Spatio-Temporal Partial Linear Model and Bandwidth Selection.</title>
      <link>https://liujl93.github.io/post/stplm/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 -0700</pubDate>
      
      <guid>https://liujl93.github.io/post/stplm/</guid>
      <description> STplm Spatio-Temporal Partial Linear Model and Bandwidth Selection.
Installation This package can be installed directly from R by running the following code:
library(devtools) install_github(&amp;quot;liujl93/STplm&amp;quot;)  Alternatively, one can download the .tar.gz file from github and then run:
install.packages(&amp;quot;~/STplm_0.1.0.tar.gz&amp;quot;, repos = NULL, type = &amp;quot;source&amp;quot;)  </description>
    </item>
    
    <item>
      <title>Krylov Subspace Method for Large Spatial Datasets</title>
      <link>https://liujl93.github.io/talk/krylov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liujl93.github.io/talk/krylov/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Semiparametric Modeling and Bandwidth Selection for Continuous-Time Geostatistical Data</title>
      <link>https://liujl93.github.io/talk/spl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liujl93.github.io/talk/spl/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>